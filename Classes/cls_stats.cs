// Generated by https://quicktype.io

using System;
using System.Collections;
using System.Collections.Generic;
using System.Dynamic;
using System.Linq;
using MathNet.Numerics;
using MathNet.Numerics.Distributions;
using MathNet.Numerics.Statistics;
using Newtonsoft.Json;
using Npgsql;
using NpgsqlTypes;

namespace faction_sim.Classes
{
    public class stats
    {
        public values faction_stats { get; set; }
        public values asset_stats { get; set; }

        public stats()
        {
            this.faction_stats = new values();
            this.asset_stats = new values();
        }
        public static stats GenStats (List<List<round>> input)
        {
            List<double> faction_damage = new List<double> ();
            List<double> asset_damage = new List<double> ();

            foreach (var i in input)
            {
                faction_damage.Add (i.Select (e => Convert.ToDouble (e.direct_faction_damage)).Sum());

                asset_damage.Add (i.Select (e => Convert.ToDouble (e.damage)).Sum());
            }

            var statistics = new DescriptiveStatistics (faction_damage);
            var stats = new stats ();

            stats.faction_stats.Maximum = statistics.Maximum;
            stats.faction_stats.Minimum = statistics.Minimum;
            // stats.values.Median = statistics.Median;

            stats.faction_stats.Mean = statistics.Mean;
            stats.faction_stats.Variance = statistics.Variance;
            stats.faction_stats.StandardDeviation = statistics.StandardDeviation;

            stats.faction_stats.Kurtosis = statistics.Kurtosis;
            stats.faction_stats.Skewness = statistics.Skewness;

            statistics = new DescriptiveStatistics (asset_damage);

            stats.asset_stats.Maximum = statistics.Maximum;
            stats.asset_stats.Minimum = statistics.Minimum;
            // stats.values.Median = statistics.Median;

            stats.asset_stats.Mean = statistics.Mean;
            stats.asset_stats.Variance = statistics.Variance;
            stats.asset_stats.StandardDeviation = statistics.StandardDeviation;

            stats.asset_stats.Kurtosis = statistics.Kurtosis;
            stats.asset_stats.Skewness = statistics.Skewness;
            
            Normal fac_normal = new Normal(stats.faction_stats.Mean, stats.faction_stats.StandardDeviation,Program.rand);

            Normal asset_normal = new Normal(stats.asset_stats.Mean, stats.asset_stats.StandardDeviation,Program.rand);

            for (int i = Convert.ToInt32(Math.Floor(stats.faction_stats.Minimum)); i < stats.faction_stats.Maximum; i++)
            {
                double item1 = fac_normal.CumulativeDistribution(i);
                
                stats.faction_stats.normalized_dist.Add((i,item1));
            }

            for (int i = Convert.ToInt32(Math.Floor(stats.asset_stats.Minimum)); i < stats.asset_stats.Maximum; i++)
            {
                double item1 = fac_normal.CumulativeDistribution(i);
                
                stats.asset_stats.normalized_dist.Add((i,item1));
            }

            return stats;
        }
    }
    public class count_dist
    {
        public double damage { get; set; }
        public double count { get; set; }
    }
    public class values
    {
        public double Maximum { get; set; }
        public double Minimum { get; set; }
        // public double Median { get; set; }
        public double Mean { get; set; }
        public double Variance { get; set; }
        public double StandardDeviation { get; set; }
        public double Kurtosis { get; set; }
        public double Skewness { get; set; }
        public List<(double x, double y)> normalized_dist {get;set;} = new List<(double,double)>();
    }
}