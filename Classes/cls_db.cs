// Generated by https://quicktype.io

using System;
using System.Collections.Generic;
using System.Linq;
using Npgsql;
using Newtonsoft.Json;
using System.Dynamic;
using NpgsqlTypes;

namespace faction_sim.Classes
{
    public class db_connection
    {
        private class settings
        {
            public string username { get; set; }
            public string password { get; set; }
        }
        settings obj = JsonConvert.DeserializeObject<settings>(System.IO.File.ReadAllText("faction_sim.json"));

        public Assets.Asset get_asset(int id)
        {
            var con = GetConnection();

            con.Open();

            List<Dictionary<string, string>> rtn = new List<Dictionary<string, string>>();

            using (var cmd = new NpgsqlCommand())
            {
                cmd.Connection = con;
                cmd.CommandText = "SELECT * FROM public.assets where public.assets.id = @id;";
                cmd.Parameters.AddWithValue("id",NpgsqlDbType.Integer,id);
                // cmd.Parameters.AddWithValue("id", id);

                using (var reader = cmd.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        Dictionary<string, string> temp = new Dictionary<string, string>();
                        for (int i = 0; i < reader.GetColumnSchema().Count(); i++)
                        {
                            temp.TryAdd<string, string>(reader.GetColumnSchema()[i].ColumnName, reader.GetString(i));
                        }

                        rtn.Add(temp);
                    }
                }
                con.Close();
                return Assets.Asset.FromJson(JsonConvert.SerializeObject(rtn[0]))[0];

            }
        }

        public Factions.Faction get_faction(int id)
        {
            var con = GetConnection();

            con.Open();

            List<Dictionary<string, string>> rtn = new List<Dictionary<string, string>>();

            using (var cmd = new NpgsqlCommand())
            {
                cmd.Connection = con;
                cmd.CommandText = "SELECT * FROM public.factions where public.factions.id = @id;";
                cmd.Parameters.AddWithValue("id", id);

                using (var reader = cmd.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        Dictionary<string, string> temp = new Dictionary<string, string>();
                        for (int i = 0; i < reader.GetColumnSchema().Count(); i++)
                        {
                            temp.TryAdd<string, string>(reader.GetColumnSchema()[i].ColumnName, reader.GetString(i));
                        }

                        rtn.Add(temp);
                    }
                }
                con.Close();
                return Factions.Faction.FromJson(JsonConvert.SerializeObject(rtn[0]))[0];
            }
        }

        public List<Factions.Faction> get_faction()
        {
            var con = GetConnection();

            con.Open();

            List<Dictionary<string, string>> rtn = new List<Dictionary<string, string>>();

            using (var cmd = new NpgsqlCommand())
            {
                cmd.Connection = con;
                cmd.CommandText = "SELECT * FROM public.factions;";

                using (var reader = cmd.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        Dictionary<string, string> temp = new Dictionary<string, string>();
                        for (int i = 0; i < reader.GetColumnSchema().Count(); i++)
                        {
                            temp.TryAdd<string, string>(reader.GetColumnSchema()[i].ColumnName, reader.GetString(i));
                        }

                        rtn.Add(temp);
                    }
                }
                con.Close();

                return Factions.Faction.FromJson(JsonConvert.SerializeObject(rtn)).ToList();
            }
        }

        private NpgsqlConnection GetConnection()
        {
            var connstring = String.Concat("Host=localhost;Username=", this.obj.username, ";Password=", this.obj.password, ";Database=sim_data");

            return new NpgsqlConnection(connstring);
        }
    }

}
